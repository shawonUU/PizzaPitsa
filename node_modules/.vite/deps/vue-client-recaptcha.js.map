{
  "version": 3,
  "sources": ["../../vue-client-recaptcha/dist/vue-client-recaptcha.es.js"],
  "sourcesContent": ["/*\r\n * vue-client-recaptcha\r\n * Creator:parsajiravand\r\n * Build simple recaptcha for vuejs without need server\r\n * v1.1.5\r\n * MIT License\r\n */\r\n\r\nimport { defineComponent, useSlots, ref, onMounted, watchEffect, openBlock, createBlock, h } from \"vue\";\r\nvar vueClientRecaptcha_vue_vue_type_style_index_0_lang = \"\";\r\nconst _sfc_main = /* @__PURE__ */ defineComponent({\r\n  props: {\r\n    value: { default: \"\" },\r\n    chars: { default: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" },\r\n    count: { default: 5 },\r\n    hideLines: { type: Boolean, default: false },\r\n    customTextColor: { default: \"\" },\r\n    textColors: { default: () => [] },\r\n    isDirty: { type: Boolean, default: true },\r\n    width: { default: function(props) {\r\n      return props.count * 30;\r\n    } },\r\n    height: { default: 50 },\r\n    canvasClass: { default: \"\" },\r\n    icon: { default: \"refresh\" },\r\n    captchaFont: { default: \"bold 28px sans-serif\" },\r\n    hideRefreshIcon: { type: Boolean, default: false }\r\n  },\r\n  emits: [\"isValid\", \"getCode\"],\r\n  setup(__props, { expose, emit }) {\r\n    const props = __props;\r\n    const slots = useSlots();\r\n    const captcha_canvas = ref();\r\n    let code = ref(\"\");\r\n    let canvasWidth = props.width;\r\n    let canvasHeight = props.height;\r\n    onMounted(() => {\r\n      captcha();\r\n    });\r\n    const captcha = () => {\r\n      captcha_canvas.value.width = canvasWidth;\r\n      captcha_canvas.value.height = canvasHeight;\r\n      let ctx = captcha_canvas.value.getContext(\"2d\");\r\n      for (let i = 0; i < props.count; i++) {\r\n        let sIndex = Math.floor(Math.random() * props.chars.length);\r\n        let sDeg = Math.random() * 30 * Math.PI / 180;\r\n        let cTxt = props.chars[sIndex];\r\n        code.value += cTxt;\r\n        let x = 10 + i * 25;\r\n        let y = 30 + Math.random() * 8;\r\n        ctx.font = props.captchaFont;\r\n        ctx.translate(x, y);\r\n        if (props.customTextColor) {\r\n          ctx.fillStyle = props.customTextColor;\r\n        } else if (props.textColors.length) {\r\n          ctx.fillStyle = props.textColors[Math.floor(Math.random() * props.textColors.length)];\r\n        } else {\r\n          ctx.fillStyle = randomColor();\r\n        }\r\n        ctx.rotate(sDeg);\r\n        ctx.fillText(cTxt, 0, 0);\r\n        ctx.rotate(-sDeg);\r\n        ctx.translate(-x, -y);\r\n      }\r\n      if (!props.hideLines) {\r\n        createLines();\r\n      }\r\n      sendValueToParent();\r\n    };\r\n    const createLines = () => {\r\n      let ctx = captcha_canvas.value.getContext(\"2d\");\r\n      for (let i = 0; i < props.count; i++) {\r\n        ctx.strokeStyle = randomColor();\r\n        ctx.beginPath();\r\n        ctx.moveTo(Math.random() * canvasWidth, Math.random() * canvasHeight);\r\n        ctx.lineTo(Math.random() * canvasWidth, Math.random() * canvasHeight);\r\n        ctx.stroke();\r\n      }\r\n    };\r\n    const sendValueToParent = () => {\r\n      emit(\"getCode\", code.value);\r\n    };\r\n    watchEffect(() => {\r\n      if (code.value && code.value === props.value) {\r\n        emit(\"isValid\", true);\r\n      } else {\r\n        emit(\"isValid\", false);\r\n      }\r\n    });\r\n    const randomColor = () => {\r\n      let r = Math.floor(Math.random() * 256);\r\n      let g = Math.floor(Math.random() * 256);\r\n      let b = Math.floor(Math.random() * 256);\r\n      return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n    };\r\n    const resetCaptcha = () => {\r\n      let ctx = captcha_canvas.value.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n      code.value = \"\";\r\n      captcha();\r\n    };\r\n    expose({\r\n      resetCaptcha\r\n    });\r\n    const render = () => {\r\n      return h(\"div\", { class: \"vue_client_recaptcha\" }, [\r\n        h(props.hideRefreshIcon ? \"\" : \"div\", { class: \"vue_client_recaptcha_icon\", onClick: () => resetCaptcha() }, [\r\n          h(slots.icon ? slots.icon : \"svg\", {\r\n            class: \"vue_client_recaptcha_icon_svg\",\r\n            width: \"24\",\r\n            height: \"24\",\r\n            viewBox: \"0 0 24 24\",\r\n            fill: \"none\",\r\n            xmlns: \"http://www.w3.org/2000/svg\"\r\n          }, [\r\n            h(\"path\", {\r\n              d: \"M2 12a9 9 0 0 0 9 9c2.39 0 4.68-.94 6.4-2.6l-1.5-1.5A6.706 6.706 0 0 1 11 19c-6.24 0-9.36-7.54-4.95-11.95C10.46 2.64 18 5.77 18 12h-3l4 4h.1l3.9-4h-3a9 9 0 0 0-18 0Z\",\r\n              fill: \"#333333\"\r\n            })\r\n          ])\r\n        ]),\r\n        h(\"canvas\", {\r\n          id: \"captcha_canvas\",\r\n          class: `captcha_canvas ${props.canvasClass}`,\r\n          ref: captcha_canvas\r\n        }, code.value)\r\n      ]);\r\n    };\r\n    return (_ctx, _cache) => {\r\n      return openBlock(), createBlock(render);\r\n    };\r\n  }\r\n});\r\nexport { _sfc_main as default };\r\n"],
  "mappings": "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",
  "names": []
}
